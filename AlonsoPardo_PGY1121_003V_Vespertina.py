# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14tGl4rZaHiY7nvr9lmPX7gtVyiXr_ZAM
"""

import random

#Clase para proporcionar valores iniciales a los atributos
class AutoSeguro:
    def __init__(self, Tipo=None, Patente=None, Marca=None, Precio=None, Multas=None, FechaRegistro=None, Dueño=None):
        self.tipo = Tipo
        self.patente = Patente
        self.marca = Marca
        self.precio = Precio
        self.multas = Multas
        self.fecha_registro = FechaRegistro
        self.dueño = Dueño

    def __str__(self):
        return f"Tipo: {self.tipo}, Patente: {self.patente}, Marca: {self.marca}, Precio: {self.precio}, Multas: {self.multas}, Fecha de Registro: {self.fecha_registro}, Dueño: {self.dueño}"

#Clase para almacenar datos
class AutoSeguroManager:
    def __init__(self):
        self.autos = []

    def grabar_auto(self, auto):
        self.autos.append(auto)

    def buscar_auto(self, patente):
        for auto in self.autos:
            if auto.patente == patente:
                return auto
        return None

    def imprimir_certificados(self):
        for auto in self.autos:
            certificado_emision = random.uniform(1500, 3500)
            certificado_anotaciones = random.uniform(1500, 3500)
            certificado_multas = random.uniform(1500, 3500)

            print(f"Certificado de Emisión de Contaminantes para {auto.patente}: ${certificado_emision}")
            print(f"Certificado de Anotaciones Vigentes para {auto.patente}: ${certificado_anotaciones}")
            print(f"Certificado de Multas para {auto.patente}: ${certificado_multas}")
            print(f"Datos del dueño actual: {auto.dueño}")
            print()

#Funciones para validar (patente, marca, precio)
def validar_patente(patente):
    return True

def validar_marca(marca):
    return 2 <= len(marca) <= 15

def validar_precio(precio):
    return precio > 5000000

#Menú principal del programa
def mostrar_menu_autoseguro():
    print("""Bienvenido a AutoSeguro ¿Qué desea hacer?

            1. Grabar
            2. Buscar
            3. Imprimir certificados
            4. Salir
    """)

#Función para la ejecución del programa
def main():
    auto_manager = AutoSeguroManager()

    while True:
        mostrar_menu_autoseguro()
        opcion = input("Ingrese la opción deseada: ")

        if opcion == "1":
            tipo = input("Ingrese el tipo de auto: ")
            patente = input("Ingrese la patente del auto: ")

            while not validar_patente(patente):
                print("Patente incorrecta. Intente nuevamente.")
                patente = input("Ingrese la patente del auto: ")

            marca = input("Ingrese la marca del auto: ")

            while not validar_marca(marca):
                print("Marca incorrecta. Intente nuevamente.")
                marca = input("Ingrese la marca del auto: ")

            precio = float(input("Ingrese el precio del auto: "))

            while not validar_precio(precio):
                print("Precio incorrecto. Debe ser mayor a $5.000.000. Intente nuevamente.")
                precio = float(input("Ingrese el precio del auto: "))

            multas = input("Ingrese las multas del auto (monto y fecha): ")
            fecha_registro = input("Ingrese la fecha de registro del auto: ")
            dueño = input("Ingrese el nombre del dueño: ")

            nuevo_auto = AutoSeguro(Tipo=tipo, Patente=patente, Marca=marca, Precio=precio, Multas=multas, FechaRegistro=fecha_registro, Dueño=dueño)
            auto_manager.grabar_auto(nuevo_auto)
            print("Auto grabado exitosamente.")

        elif opcion == "2":
            patente_buscar = input("Ingrese la patente del auto a buscar: ")
            auto_encontrado = auto_manager.buscar_auto(patente_buscar)

            if auto_encontrado:
                print("Auto encontrado:")
                print(auto_encontrado)
            else:
                print("Auto no encontrado.")

        elif opcion == "3":
            auto_manager.imprimir_certificados()

        elif opcion == "4":
            print("¡Gracias por usar AutoSeguro!")
            break

        else:
            print("Opción inválida. Por favor, ingrese una opción válida.")

#línea para una ejecución directa
if __name__ == "__main__":
    main()